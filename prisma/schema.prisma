// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int      @id @default(autoincrement())
  firstName               String   // First name of the user
  lastName                String   // Last name of the user
  username                String   @unique // Unique username for login
  password                String   // Hashed password for security
  phoneNumber             String  // Optional phone number
  dateOfBirth             DateTime? // Date of birth
  gender                  Gender  // Gender (e.g., Male, Female, Other)
  maritalStatus           MaritalStatus?  // Marital status (e.g., Single, Married)
  emergencyContactName    String?  // Name of emergency contact
  emergencyContactPhone   String?  // Phone number of emergency contact
  address                 String?  // Address of the user
  hireDate                DateTime? // Date the user was hired
  jobTitle                String?  // Job title of the user
  role                    Role      @default(Employee)
  positionLevel           String?  // Position level (e.g., Junior, Senior)
  faceDescriptor          Float[]
  photograph              String  // URL or path to the user's photograph
  salary                  Float?   // Salary of the user
  educationalLevel        String?  // Educational level (e.g., Bachelor's, Master's)
  directDepositInfo       String?  // Direct deposit information (e.g., bank details)
  cv                      String?  // URL or path to CV or certificates (PDF)
  createdAt               DateTime @default(now()) // Timestamp when the user was created
  updatedAt               DateTime @updatedAt // Timestamp when the user was last updated

  // Relationships
  departmentId            Int?     // Foreign key to Department
  department              Department? @relation(fields: [departmentId], references: [id])
  attendances             Attendance[]
  leaveRequests           LeaveRequest[]
  leaveBalances           LeaveBalance[]
}


model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Name of the department
  nameAmharic String?  
  description String?
  createdAt               DateTime @default(now()) // Timestamp when the user was created
  updatedAt               DateTime? @updatedAt // Timestamp when the user was last updated

  users       User[]   // Users associated with this department
}


enum Role {
  Employee
  HRAdmin
  Supervisor
}
enum Gender {
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum PositionLevel {
  Junior
  Mid
  Senior
}

//////////////////

model Attendance {
  id           Int       @id @default(autoincrement())
  userId       Int
  date         DateTime
  morningCheckInTime  DateTime?
  morningCheckOutTime DateTime?
  afternoonCheckInTime  DateTime?
  afternoonCheckOutTime DateTime?
  checkOutEnabled Boolean @default(false)

  status       AttendanceStatus @default(ABSENT)

  isLateMorningCheckIn Boolean?
  isEarlyMorningCheckOut Boolean?
  isLateAfternoonCheckIn Boolean?
  isEarlyAfternoonCheckOut Boolean?

  
  manuallyCheckedIn   Boolean @default(false)

  user         User      @relation(fields: [userId], references: [id])
}


model LeaveRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  leaveTypeId Int
  startDate   DateTime
  endDate     DateTime
  status      LeaveStatus @default(PENDING)
  reason      String
  
  isApprovedBySupervisor  Boolean? @default(false)
  isApprovedByAdmin  Boolean? @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime? @updatedAt  
  user        User       @relation(fields: [userId], references: [id])
  leaveType   LeaveType  @relation(fields: [leaveTypeId], references: [id])
}

model LeaveBalance {
  id          Int       @id @default(autoincrement())
  balance     Int?
  userId      Int
  updatedAt   DateTime  @updatedAt
  leaveTypeId Int     
  user        User       @relation(fields: [userId], references: [id])
  leaveType   LeaveType  @relation(fields: [leaveTypeId], references: [id])
  @@unique([userId, leaveTypeId]) // Composite unique index
}

model LeaveType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  maxDays     Int
  accrued Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime? @updatedAt
  leaveRequests LeaveRequest[]
  leaveBalance  LeaveBalance[]
}

model Calendar {
  id           Int       @id @default(autoincrement())
  eventName    String
  eventDate    DateTime?
  isRecurring  Boolean   @default(false)
  recurringType String? @default("yearly")
  eventEnd     DateTime?
  eventType    EventType
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
enum RecurringType {
  daily
  weekly
  monthly
  yearly
}

model Settings {
  id        Int      @id @default(autoincrement())
  key       String   @unique // Unique key for the setting
  value     String   // Value of the setting (can be a string representation of any data type)
  type      SettingType @default(STRING) // Type of the setting
  description String?  // Optional description of the setting
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  DATE_TIME 
}


enum AttendanceStatus {
  PRESENT
  ABSENT
  ON_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Language {
  ENGLISH
  AMHARIC
}

enum EventType {
  HOLIDAY
  OTHER
}


// enum RecurringDay {
//   MONDAY
//   TUESDAY
//   WEDNESDAY
//   THURSDAY
//   FRIDAY
//   SATURDAY
//   SUNDAY
// }
